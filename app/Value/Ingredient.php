<?php
/** 
 * code generated by vog
 * https://github.com/MarvinWank/vog
 */
declare(strict_types=1);

namespace App\Value;


use UnexpectedValueException;

final class Ingredient implements ValueObject
{
    private string $name;
    private int $gramm;
    private int $kcal;

    public function __construct (
        string $name,
        int $gramm,
        int $kcal
    ) {
        $this->name = $name;
        $this->gramm = $gramm;
        $this->kcal = $kcal;
    }
    
    public function name(): string 
    {
        return $this->name;
    }
    
    public function gramm(): int 
    {
        return $this->gramm;
    }
    
    public function kcal(): int 
    {
        return $this->kcal;
    }
    
    public function with_name(string $name): self 
    {
        return new self(
            $name,
            $this->gramm,
            $this->kcal
        );
    }
    
    public function with_gramm(int $gramm): self 
    {
        return new self(
            $this->name,
            $gramm,
            $this->kcal
        );
    }
    
    public function with_kcal(int $kcal): self 
    {
        return new self(
            $this->name,
            $this->gramm,
            $kcal
        );
    }
    
    public function toArray(): array
    {
        return [
            'name' => $this->name,
            'gramm' => $this->gramm,
            'kcal' => $this->kcal,
        ];
    }
    
    public static function fromArray(array $array): self
    {
        if (!array_key_exists('name', $array)) {
            throw new UnexpectedValueException('Array key name does not exist');
        }
        
        if (!array_key_exists('gramm', $array)) {
            throw new UnexpectedValueException('Array key gramm does not exist');
        }
        
        if (!array_key_exists('kcal', $array)) {
            throw new UnexpectedValueException('Array key kcal does not exist');
        }
        
        return new self(
            $array['name'],
            $array['gramm'],
            $array['kcal']
        );
    }
        
    private function valueToArray($value)
    {
        if (method_exists($value, 'toArray')) {
            return $value->toArray();
        }
        
        return (string) $value;
    }    
    public function equals($value): bool
    {
        $ref = $this->toArray();
        $val = $value->toArray();
        
        return ($ref === $val);
    }
}