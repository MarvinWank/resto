<?php
/** 
 * code generated by vog
 * https://github.com/MarvinWank/vog
 */
declare(strict_types=1);

namespace App\Value;


use UnexpectedValueException;

final class Recipe implements ValueObject
{
    private int $id;
    private string $title;
    private User $author;
    private DietStyle $dietStyle;
    private Cuisine $cuisine;
    private int $timeToCook;
    private int $totalTime;
    private IngredientsSet $ingredients;

    public function __construct (
        int $id,
        string $title,
        User $author,
        DietStyle $dietStyle,
        Cuisine $cuisine,
        int $timeToCook,
        int $totalTime,
        IngredientsSet $ingredients
    ) {
        $this->id = $id;
        $this->title = $title;
        $this->author = $author;
        $this->dietStyle = $dietStyle;
        $this->cuisine = $cuisine;
        $this->timeToCook = $timeToCook;
        $this->totalTime = $totalTime;
        $this->ingredients = $ingredients;
    }
    
    public function id(): int 
    {
        return $this->id;
    }
    
    public function title(): string 
    {
        return $this->title;
    }
    
    public function author(): User 
    {
        return $this->author;
    }
    
    public function dietStyle(): DietStyle 
    {
        return $this->dietStyle;
    }
    
    public function cuisine(): Cuisine 
    {
        return $this->cuisine;
    }
    
    public function timeToCook(): int 
    {
        return $this->timeToCook;
    }
    
    public function totalTime(): int 
    {
        return $this->totalTime;
    }
    
    public function ingredients(): IngredientsSet 
    {
        return $this->ingredients;
    }
    
    public function with_id(int $id): self 
    {
        return new self(
            $id,
            $this->title,
            $this->author,
            $this->dietStyle,
            $this->cuisine,
            $this->timeToCook,
            $this->totalTime,
            $this->ingredients
        );
    }
    
    public function with_title(string $title): self 
    {
        return new self(
            $this->id,
            $title,
            $this->author,
            $this->dietStyle,
            $this->cuisine,
            $this->timeToCook,
            $this->totalTime,
            $this->ingredients
        );
    }
    
    public function with_author(User $author): self 
    {
        return new self(
            $this->id,
            $this->title,
            $author,
            $this->dietStyle,
            $this->cuisine,
            $this->timeToCook,
            $this->totalTime,
            $this->ingredients
        );
    }
    
    public function with_dietStyle(DietStyle $dietStyle): self 
    {
        return new self(
            $this->id,
            $this->title,
            $this->author,
            $dietStyle,
            $this->cuisine,
            $this->timeToCook,
            $this->totalTime,
            $this->ingredients
        );
    }
    
    public function with_cuisine(Cuisine $cuisine): self 
    {
        return new self(
            $this->id,
            $this->title,
            $this->author,
            $this->dietStyle,
            $cuisine,
            $this->timeToCook,
            $this->totalTime,
            $this->ingredients
        );
    }
    
    public function with_timeToCook(int $timeToCook): self 
    {
        return new self(
            $this->id,
            $this->title,
            $this->author,
            $this->dietStyle,
            $this->cuisine,
            $timeToCook,
            $this->totalTime,
            $this->ingredients
        );
    }
    
    public function with_totalTime(int $totalTime): self 
    {
        return new self(
            $this->id,
            $this->title,
            $this->author,
            $this->dietStyle,
            $this->cuisine,
            $this->timeToCook,
            $totalTime,
            $this->ingredients
        );
    }
    
    public function with_ingredients(IngredientsSet $ingredients): self 
    {
        return new self(
            $this->id,
            $this->title,
            $this->author,
            $this->dietStyle,
            $this->cuisine,
            $this->timeToCook,
            $this->totalTime,
            $ingredients
        );
    }
    
    public function toArray(): array
    {
        return [
            'id' => $this->id,
            'title' => $this->title,
            'author' =>  $this->valueToArray($this->author),
            'dietStyle' =>  $this->valueToArray($this->dietStyle),
            'cuisine' =>  $this->valueToArray($this->cuisine),
            'timeToCook' => $this->timeToCook,
            'totalTime' => $this->totalTime,
            'ingredients' =>  $this->valueToArray($this->ingredients),
        ];
    }
    
    public static function fromArray(array $array): self
    {
        if (!array_key_exists('id', $array)) {
            throw new UnexpectedValueException('Array key id does not exist');
        }
        
        if (!array_key_exists('title', $array)) {
            throw new UnexpectedValueException('Array key title does not exist');
        }
        
        if (!array_key_exists('author', $array)) {
            throw new UnexpectedValueException('Array key author does not exist');
        }
        
        if (is_string($array['author']) && is_a(User::class, Enum::class, true)) {
            $array['author'] = User::fromName($array['author']);
        }
    
        if (is_array($array['author']) && (is_a(User::class, Set::class, true) || is_a(User::class, ValueObject::class, true))) {
            $array['author'] = User::fromArray($array['author']);
        }

        if (!array_key_exists('dietStyle', $array)) {
            throw new UnexpectedValueException('Array key dietStyle does not exist');
        }
        
        if (is_string($array['dietStyle']) && is_a(DietStyle::class, Enum::class, true)) {
            $array['dietStyle'] = DietStyle::fromName($array['dietStyle']);
        }
    
        if (is_array($array['dietStyle']) && (is_a(DietStyle::class, Set::class, true) || is_a(DietStyle::class, ValueObject::class, true))) {
            $array['dietStyle'] = DietStyle::fromArray($array['dietStyle']);
        }

        if (!array_key_exists('cuisine', $array)) {
            throw new UnexpectedValueException('Array key cuisine does not exist');
        }
        
        if (is_string($array['cuisine']) && is_a(Cuisine::class, Enum::class, true)) {
            $array['cuisine'] = Cuisine::fromName($array['cuisine']);
        }
    
        if (is_array($array['cuisine']) && (is_a(Cuisine::class, Set::class, true) || is_a(Cuisine::class, ValueObject::class, true))) {
            $array['cuisine'] = Cuisine::fromArray($array['cuisine']);
        }

        if (!array_key_exists('timeToCook', $array)) {
            throw new UnexpectedValueException('Array key timeToCook does not exist');
        }
        
        if (!array_key_exists('totalTime', $array)) {
            throw new UnexpectedValueException('Array key totalTime does not exist');
        }
        
        if (!array_key_exists('ingredients', $array)) {
            throw new UnexpectedValueException('Array key ingredients does not exist');
        }
        
        if (is_string($array['ingredients']) && is_a(IngredientsSet::class, Enum::class, true)) {
            $array['ingredients'] = IngredientsSet::fromName($array['ingredients']);
        }
    
        if (is_array($array['ingredients']) && (is_a(IngredientsSet::class, Set::class, true) || is_a(IngredientsSet::class, ValueObject::class, true))) {
            $array['ingredients'] = IngredientsSet::fromArray($array['ingredients']);
        }

        return new self(
            $array['id'],
            $array['title'],
            $array['author'],
            $array['dietStyle'],
            $array['cuisine'],
            $array['timeToCook'],
            $array['totalTime'],
            $array['ingredients']
        );
    }
        
    private function valueToArray($value)
    {
        if (method_exists($value, 'toArray')) {
            return $value->toArray();
        }
        
        return (string) $value;
    }    
    public function equals($value): bool
    {
        $ref = $this->toArray();
        $val = $value->toArray();
        
        return ($ref === $val);
    }
    public function __toString(): string
    {
        return $this->toString();
    }
    
    public function toString(): string
    {
        return (string) $this->id;
    }
    
}