<?php

declare(strict_types=1);

namespace App\Value;

/**
 * Generated by prolic/fpp - do not edit !!!
 * @codeCoverageIgnore
 */
final class Cuisine
{
    public const DEUTSCH = 0;
    public const MEDITERAN = 1;
    public const ASIATISCH = 2;
    public const AMERIKANISCH = 3;
    public const INDISCH = 4;
    public const Options = ['DEUTSCH', 'MEDITERAN', 'ASIATISCH', 'AMERIKANISCH', 'INDISCH'];

    private string $name;
    private int $value;

    public static function DEUTSCH(): self
    {
        return new self('DEUTSCH', 0);
    }

    public static function MEDITERAN(): self
    {
        return new self('MEDITERAN', 1);
    }

    public static function ASIATISCH(): self
    {
        return new self('ASIATISCH', 2);
    }

    public static function AMERIKANISCH(): self
    {
        return new self('AMERIKANISCH', 3);
    }

    public static function INDISCH(): self
    {
        return new self('INDISCH', 4);
    }

    private function __construct(string $name, int $value)
    {
        $this->name = $name;
        $this->value = $value;
    }

    public static function fromName(string $name): self
    {
        foreach (self::Options as $i => $n) {
            if ($n === $name) {
                return new self($n, $i);
            }
        }

        throw new \InvalidArgumentException('Unknown enum name given');
    }

    public static function fromValue(int $value): self
    {
        if (! isset(self::Options[$value])) {
            throw new \InvalidArgumentException('Unknown enum value given');
        }

        return new self(self::Options[$value], $value);
    }

    public function equals(?self $other): bool
    {
        return null !== $other && $this->name === $other->name;
    }

    public function name(): string
    {
        return $this->name;
    }

    public function value(): int
    {
        return $this->value;
    }

    public function __toString(): string
    {
        return $this->name;
    }

    public function toString(): string
    {
        return $this->name;
    }
}
