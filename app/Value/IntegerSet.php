<?php
/** 
 * code generated by vog
 * https://github.com/MarvinWank/vog
 */
declare(strict_types=1);

namespace App\Value;


use UnexpectedValueException;
use BadMethodCallException;

class IntegerSet implements Set,\Countable,\ArrayAccess,\Iterator
{        
    private array $items;
    private int $position;
        
    private function __construct(array $items = [])
    {
        $this->position = 0;
        $this->items = $items;
    }    public static function fromArray(array $items) {
        foreach ($items as $key => $item) {
            $type = gettype($item);
            if($type !== 'int'){
                throw new UnexpectedValueException('array expects items of int but has ' . $type . ' on index ' . $key);
            }  
        }
        return new self($items);
    }
    
    public function toArray() {
        return $this->items;
    }
    public function equals(?self $other): bool
    {
        $ref = $this->toArray();
        $val = $other->toArray();
                
        return ($ref === $val);
    }    
    
    public function contains(int $item): bool {
        return array_search($item, $this->items) !== false;
    }
    
    public function count(): int
    {
        return count($this->items);
    }
    
        public function offsetExists($offset) {
        return isset($this->items[$offset]);
    }

    public function offsetGet($offset) {
        return $this->items[$offset];
    }

    public function current() {
        return $this->items[$this->position];
    }

    public function rewind() {
        $this->position = 0;
    }

    public function key() {
        return $this->position;
    }

    public function next() {
        ++$this->position;
    }

    public function valid() {
        return isset($this->items[$this->position]);
    }
    
    public function add(int $item): self {
        array_push($this->items,$item);
        return $this;
    }

    public function offsetSet($offset, $value) {
        if (empty($offset)) {
            array_push($this->items, $value);
        } else {
            $this->items[$offset] = $value;
        }
    }

    public function offsetUnset($offset) {
        unset($this->items[$offset]);
        $this->items = array_values($this->items);
    }
    
    public function remove(int $item): self {
        $values = $this->toArray();
        if(($key = array_search($item, $values)) !== false) {
            unset($this->items[$key]);
        }
                
        $this->items = array_values($this->items);
        return $this;
    }
}