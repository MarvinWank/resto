<?php
/** 
 * code generated by vog
 * https://github.com/MarvinWank/vog
 */
declare(strict_types=1);

namespace App\Value;


use UnexpectedValueException;

class ShoppingList implements ValueObject
{
    private ?int $id;
    private int $userId;
    private IngredientsSet $ingredients;

    public function __construct (
        ?int $id,
        int $userId,
        IngredientsSet $ingredients
    ) {
        $this->id = $id;
        $this->userId = $userId;
        $this->ingredients = $ingredients;
    }
    
    public function id(): ?int 
    {
        return $this->id;
    }
    
    public function userId(): int 
    {
        return $this->userId;
    }
    
    public function ingredients(): IngredientsSet 
    {
        return $this->ingredients;
    }
    
    public function with_id(?int $id): self 
    {
        return new self(
            $id,
            $this->userId,
            $this->ingredients
        );
    }
    
    public function with_userId(int $userId): self 
    {
        return new self(
            $this->id,
            $userId,
            $this->ingredients
        );
    }
    
    public function with_ingredients(IngredientsSet $ingredients): self 
    {
        return new self(
            $this->id,
            $this->userId,
            $ingredients
        );
    }
    
    public function toArray(): array
    {
        return [
            'id' => $this->id,
            'userId' => $this->userId,
            'ingredients' =>  $this->valueToArray($this->ingredients),
        ];
    }
    
    public static function fromArray(array $array): self
    {
        if (!array_key_exists('id', $array)) {
            throw new UnexpectedValueException('Array key id does not exist');
        }
        
        if (!array_key_exists('userId', $array)) {
            throw new UnexpectedValueException('Array key userId does not exist');
        }
        
        if (!array_key_exists('ingredients', $array)) {
            throw new UnexpectedValueException('Array key ingredients does not exist');
        }
                if (is_string($array['ingredients']) && is_a(IngredientsSet::class, Enum::class, true)) {
            $array['ingredients'] = IngredientsSet::fromName($array['ingredients']);
        }
    
        if (is_array($array['ingredients']) && (is_a(IngredientsSet::class, Set::class, true) || is_a(IngredientsSet::class, ValueObject::class, true))) {
            $array['ingredients'] = IngredientsSet::fromArray($array['ingredients']);
        }

        return new self(
            $array['id'],
            $array['userId'],
            $array['ingredients']
        );
    }
        
    private function valueToArray($value)
    {
        if (method_exists($value, 'toArray')) {
            return $value->toArray();
        }
        
        if(is_a($value, \DateTime::class, true) || is_a($value, \DateTimeImmutable::class, true)){
            return $value->format('Y-m-d');
        }
        
        return (string) $value;
    }
        
    public function equals($value): bool
    {
        $ref = $this->toArray();
        $val = $value->toArray();
        
        return ($ref === $val);
    }
    
}