<?php
/** 
 * code generated by vog
 * https://github.com/MarvinWank/vog
 */
declare(strict_types=1);

namespace App\Value;


use InvalidArgumentException;

class SIUnit implements Enum
{
    public const VALUES = ['gramm', 'kilogramm', 'millilitre', 'litre', 'pieces', ];               
    public const NAMES = ['G', 'KG', 'ML', 'L', 'STK', ];               
    public const OPTIONS = [ 
        'G' => 'gramm',
        'KG' => 'kilogramm',
        'ML' => 'millilitre',
        'L' => 'litre',
        'STK' => 'pieces',
    ];

    public const G = 'gramm';               
    public const KG = 'kilogramm';               
    public const ML = 'millilitre';               
    public const L = 'litre';               
    public const STK = 'pieces';                       
    private string $name;
    private string $value;
        
    private function __construct(string $name)
    {
        $this->name = $name;
        $this->value = self::OPTIONS[$name];
    }

    public static function G(): self
    {
        return new self('G');
    }
    
    public static function KG(): self
    {
        return new self('KG');
    }
    
    public static function ML(): self
    {
        return new self('ML');
    }
    
    public static function L(): self
    {
        return new self('L');
    }
    
    public static function STK(): self
    {
        return new self('STK');
    }
    
    public static function fromValue(string $value): self
    {
        foreach (self::OPTIONS as $key => $option) {
            if ($value === $option) {
                return new self($key);
            }
        }

        throw new InvalidArgumentException("Unknown enum value '$value' given");
    }
    
    public static function fromName(string $name): self
    {
        if(!array_key_exists($name, self::OPTIONS)){
             throw new InvalidArgumentException("Unknown enum name $name given");
        }
        
        return new self($name);
    }
    
    public function equals(?self $other): bool
    {
        return (null !== $other) && ($this->name() === $other->name());
    }

    public function name(): string
    {
        return $this->name;
    }

    public function value(): string
    {
        return $this->value;
    }

    public function __toString(): string
    {
        return $this->name;
    }

    public function toString(): string
    {
        return $this->name;
    }
}